{"version":3,"sources":["Components/navbar/nav.js","Components/weather/form/form.js","Components/weather/weather-data/weather-data.js","Components/weather/weather.js","Components/intro/intro.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","activeClassName","exact","to","Form","props","onSubmit","getWeather","type","name","placeholder","WeatherData","this","city","country","icon","src","alt","sky","tempreature","Math","floor","max","min","description","error","Component","API_KEY","WeatherGet","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","sys","weather","main","temp","temp_min","temp_max","discriptopn","Intro","App","path","component","Weather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.37c5d735.chunk.js","sourcesContent":["import React from 'react'\r\nimport './nav.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <NavLink className=\"nav\" activeClassName=\"active\" exact to=\"/\"> Home </NavLink>\r\n            <NavLink className=\"nav\" activeClassName=\"active\" exact to=\"/weather\"> Weather </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport './form.css'\r\n\r\nconst Form = (props) => {\r\n        return (\r\n            <form onSubmit={props.getWeather}>\r\n                <h3>Just Type The City Name</h3>\r\n                <p>You Must Spelling Correctly</p>\r\n                <input type=\"text\" name='city' placeholder=\"Enter City\" />\r\n                <button>Find</button>\r\n            </form>\r\n        )\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './weather-data.css'\r\n\r\nclass WeatherData extends Component {\r\n    render() {\r\n        return (\r\n            <div className='weather-data'>\r\n                {this.props.city && <p>{this.props.city}, {this.props.country}</p>}\r\n                {this.props.icon && <img src={`http://openweathermap.org/img/w/${this.props.icon}.png`} alt=\"\"/>}\r\n                {this.props.sky && <p>{this.props.sky}</p>}\r\n                {this.props.tempreature && <p>{Math.floor(this.props.tempreature)}&#xb0;</p>}\r\n                {this.props.max && <p><span>{Math.floor(this.props.min)}&#xb0;</span>\r\n                <span>{Math.floor(this.props.max)}&#xb0;</span></p>}\r\n                {this.props.description && <p>{this.props.description}</p>}\r\n                {this.props.error && <p>error: {this.props.error}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherData;","import React, {Component} from 'react';\r\nimport Form from \"./form/form\";\r\nimport WeatherData from \"./weather-data/weather-data\";\r\n\r\nconst API_KEY = 'e36ed364400282e43250b6c4c0274d44';\r\nclass WeatherGet extends Component {\r\n    state = {\r\n        city: '',\r\n        country: '',\r\n        icon: '',\r\n        sky: '',\r\n        tempreature: '',\r\n        min: '',\r\n        max: '',\r\n        description: '',\r\n        error: ''\r\n    }\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n        const data = await api.json();\r\n            if(city) {\r\n            this.setState({\r\n            city: data.name,\r\n            country: data.sys.country,\r\n            icon: data.weather[0].icon,\r\n            sky: data.weather[0].main,\r\n            tempreature: data.main.temp,\r\n            min: data.main.temp_min,\r\n            max: data.main.temp_max,\r\n            description: data.weather[0].description,\r\n            error: '' \r\n            })\r\n        } else {\r\n            this.setState({\r\n                city: '',\r\n                country: '',\r\n                icon: '',\r\n                sky: '',\r\n                tempreature: '',\r\n                min: '',\r\n                max: '',\r\n                description: '',\r\n                error: 'Please Enter Data'\r\n            })\r\n        }\r\n    }\r\n    render () {\r\n      return (\r\n        <div className=\"WeatherGet\">\r\n            <Form getWeather={this.getWeather}/>\r\n            <WeatherData\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            icon={this.state.icon}\r\n            sky={this.state.main}\r\n            tempreature={this.state.tempreature}\r\n            min={this.state.min}\r\n            max={this.state.max}\r\n            discriptopn={this.state.description}\r\n            error={this.state.error}\r\n            />\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default WeatherGet;","import React from 'react';\r\nimport './intro.css';\r\n\r\nconst Intro = () => {\r\n    return (\r\n        <div className=\"intro\">\r\n            <div className=\"blue-circle-1\"></div>\r\n            <div className=\"blue-circle-2\"></div>\r\n            <div className=\"blue-circle-3\"></div>\r\n            <div className=\"opac\">\r\n                <h1>DES_</h1>\r\n                <h1>IGN</h1>\r\n            </div>\r\n            <div className=\"intro-data\">\r\n                <div className=\"lft\"></div>\r\n                <div className=\"rgt\">\r\n                        <h1>Hello<span>.</span></h1>\r\n                        <h1>I am</h1>\r\n                        <h1>Patrick</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Intro;","import React from 'react';\nimport {HashRouter , Route} from 'react-router-dom';\nimport Navbar from '../src/Components/navbar/nav'\nimport Weather from '../src/Components/weather/weather'\nimport Intro from '../src/Components/intro/intro'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n      <Navbar />\n        <Route exact path=\"/\" component={Intro} />\n        <Route path=\"/weather\" component={Weather} />\n      </HashRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}